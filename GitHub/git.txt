Git ~ Free and open source "version control system" 
    ~ Tools that helps to tracks changes in code
    ~ Track history
    ~ Help to collaborate

GitHub ~ Website where we host repositories online

README.md (mark down)

// Terminal
 ~ git --version (to check git version)
 ~ git

// Configuring Git (means storing our details in Git, 2 types Global and Local) 
 ~ git config --global user.name"Akansha"
 ~ git config --global user.email"kumariakansha159@gmail.com"
 ~ git config --list

 // Visual Code
    (in that at below there's (x 0) click on that, then go to terminal and can run all commands)
 ~ pwd
 ~ ls
 ~ ls -a (for hidden files(always strt with "."), we will always get to see ".git" only in git files!)
 ~ git --version
 ~ git config --list
 ~ "q" to quit git
 ~ clear
 ~ git clone 'link' (code we want to clone from github to our local machine, code - local(beside codespace) - https - link)
 ~ git status (to check it's current status, "M" modified, "U" untracked, staged )

 ~ git add 'file name like-index.html' (add particular file)
 ~ git add . (this will add file)
 ~ git commit -m '"some message"' (m means message, and then msg under " ")
 ~ git push origin main (push- upload local repo content to main repo)


// Visual studio code, can create new files with help of commands in visual studio code
~ cd .. (to jum out from current folder)
~ ls  (to check folders)
~ mkdir project2
~ ls
~ cd project2  (to take entry in folder project2)
~ ls -la  (to check presence of hidden files, will found no .git, means it's not yet linked to github, a-showing hidden files, la-showing hidden files in list)
~ git init  (init- "intialize" means intializing/adding new git repo)
~ ls -la  (to verify, will find .git)
  Now will create new Repo in github(without readme.md) and copy the link
~ git remote add origin link..  (in Vs terminal)
~ git remote -v  (to verify remote(fetch,push))
~ git branch  (to check git's current branch) 
  master(earlier it was master but now git decided to change it's name to "main", so we also need to change it to main for sucessful commit and push)
~ git branch -M main
~ git branch (to reverify)
~ git push origin main


  // Now later if make any new changes to that repo in git, just do
~ git status
~ git add .
~ git commit -m "Second commitment"
~ git push origin main
~ git push -u origin main 
 (-u means creating upstream, means once u write this, then no need to "git push origin main", only can write "git push" as in cloud upstream it stored it's info)
~ git commit -am "added few lines" (when we do very little modification, we can commit and add at same time, am{add message})

// Now let consider, 3 branches are there main, master, development 
// to push code in development branch, "git push origin development"
// or to change name of master to development, "git branch -M devlopment"

// Git branch main(default branch), can create git branch named "feature" means making new duplicate copy of folder main, and doing all changes required in it
// Real life Example, if 2 developers doing work on css and js, now one can do on "feature" and one on "main" parllely and later can combine all by pushing it in main branch!
// furthemor can create more branches as per requirment, and after any sucessfull changes can push it in "main" branch


 // Git branches
~ git branch  (to check number of branches currently in this repo)
~ git branch -M name1 (to Rename current branch)
~ git checkout name2  (to getout from current branch and enter in "name2 branch")
~ git checkout -b name2 (in case if name2 branch doesn't exist, then 1st create and then enter to name2 branch)
~ git branch -d/-D name2 (to delete branch name2) {you can't delete branch, when you already in, first need to checkout from particular branch then delete}


// Now let's created branch named feature, but still can't able to push it in main github, coz first need to upstream it in git
~ git push --set-upstream/-u origin feature


// Merging Code
~ git diff main (as currently in feature branch and want compare(commit, branches, files nd more) it with main branch)
~ git merge main (to merge feature with main)

 2nd method to merge it using "Pull request"
// We will get to see in Gthub, option "Compare and Pull Request"
// It let you tell others about changes you pushed to branch in repositories in github

Now with help of 2nd method, we can sucesfully merge "feature branch" with "main branch" in Github but in our local System it still incompleted
So to complete it we use Pull command

~ git pull origin main 

(used to fetch and download content from a remote repo and immediately update the local repo to match that content, but sometime we also recieve Merge Conflicts)
(Merge Conflict, if from 2 different sides both trying to do changes in same place/file and merging it in, github get confused whose changes to coinsider)
An event that takes place when Git is unable to automatically resolve differences in code between two commits.

   // Fixing Mistakes
 a) Staged changes (when added the file not commited yet add. but want to unadd it)
 ~ git reset app.js  (for particular file name)
 ~ git reset  (for all file, thier last commits)

 b) Commited Changes 
 ~ git reset HEAD~1 (HEAD is kind of pointer pointing out the last commit, this will uncommit the last commit)
 
 c) Commited Changes for Many Commits!
   ** First..
 ~ git log  (it will shows all informations of all commits)

   ** Now we will select the hash code for the commit we want to delete till before and jump there (could be number of any commits)
 ~ git reset HashCodeHere
 ~ git reset --hard HashCodeHere (this will delete all adds and modfications also from the code which was commited before, also head pointer settled in new poistion now)
   
What is Forking?
A fork is a new repository that shares code and visibility settings with the original "upstream"
repository. "Open Source Contribution"
Fork is a rough copy.

Example: github search Node - fork - can untick(copy main branch only) if want to get acess all branches - create fork - it will get downloded in your account
         - can commit change - pull request - new pull request(can merge with any branches, available branches options will availabel)

Pull request - helps to merge 2 different branches of one repo
             - also gives acess to add our code or contibution to somone's else repo 